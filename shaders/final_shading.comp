#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "random.glsl"
#include "compress.glsl"
#include "pbr_metallicworkflow.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

//
//--------------------------------------------------------------------------------------------------
//
//
void main()
{
	uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

	ivec2 imageRes    = rtxState.size;
	ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);  //SampleSizzled();

	// Check if the pixel is outside the image
	if(imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
	{
		return;
	}

	// Compute 1D index
	uint idx = rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;
	
	// Compute the color
	// Get the reconnection data
	ReconnectionData data = reconnectionDataBuffer[idx];
	uvec4 hitInfo = data.preRcVertexHitInfo;

	// If the rc vertex is not valid, return
	if(hitInfo == vec4(0))
	{
		return;
	}

	// Get the final sample
	FinalSample fSample = finalSamples[idx];

	// Unpack metallic and roughness
    vec2 metallicRoughness = unpackUnorm4x8(hitInfo.z).xy;

	// Unpack Albedo
    vec3 albedo = unpackUnorm4x8(hitInfo.w).rgb;

	// Unpack Normal
	vec3 prevNormal = decompress_unit_vec(hitInfo.y);

	// Compute final color
	vec3 color = vec3(0.0);

	// Set shading state
	State state;
	state.mat.albedo = albedo;
	state.mat.metallic = metallicRoughness.x;
	state.mat.roughness = max(metallicRoughness.y, 0.001);

	// Compute BSDF*cos
	vec3 bsdfCos = metallicWorkflowBSDF(state, prevNormal, data.preRcVertexWo, fSample.dir) * absDot(prevNormal, fSample.dir);
	color = (data.pathPreRadiance + data.pathPreThp * bsdfCos * fSample.Li);

	// Update the result image
	// imageStore(resultImage, imageCoords, vec4(color, 1.0f));

	//Accumulated
	if(rtxState.frame > 0)
	{
		// Do accumulation over time
		vec3 old_color  = imageLoad(resultImage, imageCoords).xyz;
		vec3 new_result = mix(old_color, color, 1.0f / float(rtxState.frame + 1));
		//imageStore(resultImage, imageCoords, vec4(new_result, 1.f));
	}
	else
	{
		// First frame, replace the value in the buffer
		//imageStore(resultImage, imageCoords, vec4(color, 1.f));
	}
}