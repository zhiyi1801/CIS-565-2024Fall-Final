#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "HashBuildStructure.glsl"

//
//--------------------------------------------------------------------------------------------------
//
//
// Query or Insert a cell
int FindOrInsertCell(vec3 pos, vec3 norm, float cellSize, GIParameter params, ivec2 imageCoords)
{
    // Discretize the position
    uvec3 cellP = uvec3((pos - params.bboxMin) / cellSize);

    // Quantize the normal
    uint normprint = BinaryNorm(norm);

    // Get the cell index
    uint cellIndex = pcg32(normprint + pcg32( uint( cellSize + pcg32(cellP.z + pcg32(cellP.y + pcg32(cellP.x)))) )) % cellSizeNoHash;

    // Second hash index 
    uint checkSum = max(jenkinsHash(normprint + jenkinsHash( uint(cellSize+ jenkinsHash(cellP.z + jenkinsHash(cellP.y + jenkinsHash(cellP.x)))) )), 1);

    for(uint i = 0; i < 32; ++i)
    {
    // Linear probing stride 32
    uint idx = cellIndex * 32 + i;

    // Previous checksum 
    uint checkSumPre;

    // Check if the cell is empty or the checksum is the same
    // if empty(0), write the checksum and return idx
    // if the same, return the idx
    checkSumPre = atomicCompSwap(checkSumBuffer[idx], 0, checkSum);

    if(checkSumPre == 0 || checkSum == checkSumPre)
    {
        if(i == 31)
        {
            // Debug
            // imageStore(debugUintImage, imageCoords, uvec4(i, idx, cellIndex, 1));
        }
        return int(idx);
    }
    }
    // Debug
    // imageStore(debugUintImage, imageCoords, uvec4(checkSum, 1, cellIndex, 1));
    return -1;
}

//
//--------------------------------------------------------------------------------------------------
//
//
int FindCell(vec3 pos, vec3 norm, vec3 cellSize, GIParameter params)
{
  // Discretize the position
  uvec3 cellP = uvec3((pos - params.bboxMin) / cellSize);

  // Quantize the normal
  uint normprint = BinaryNorm(norm);

  // Get the cell index
  uint cellIndex = pcg32(normprint + pcg32( uint(cellSize + pcg32(cellP.z + pcg32(cellP.y + pcg32(cellP.x)))) )) % cellSizeNoHash;

  // Second hash index 
  uint checkSum = max(jenkinsHash(normprint + jenkinsHash( uint(cellSize+ jenkinsHash(cellP.z + jenkinsHash(cellP.y + jenkinsHash(cellP.x)))) )), 1);

  for(uint i = 0; i < 32; ++i)
  {
    // Linear probing stride 32
    uint idx = cellIndex * 32 + i;

    // Previous checksum 
    uint checkSumPre;

    // Check if the checksum is the same
    // if the same, return the idx
    if(checkSum == checkSumBuffer[idx])
    {
      return int(idx);
    }
  }

  return -1;
}

//
//--------------------------------------------------------------------------------------------------
//
Reservoir SetGIReservoir(InitialSample s)
{
  Reservoir initialReservoir;

  initialReservoir.vPos = s.preRcVertexPos;
  initialReservoir.vNorm = s.preRcVertexNorm;
  initialReservoir.sPos = s.rcVertexPos;
  initialReservoir.sNorm = s.rcVertexNorm;
  initialReservoir.radiance = s.rcVertexLo;

  initialReservoir.weightF = s.pdf > 0.f ? 1.f / s.pdf : 0.f;
  initialReservoir.M = 1u;
  initialReservoir.age = 0;

  return initialReservoir;
}

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
#ifndef SWIZZLED
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(local_size_x = 32, local_size_y = 2) in;
#extension GL_EXT_shader_8bit_storage : enable  // Using uint_8 ...
ivec2 SampleSizzled()
{
  // Sampling Swizzling
  // Convert 32x2 to 8x8, where the sampling will follow how invocation are done in a subgroup.
  // layout(local_size_x = 32, local_size_y = 2) in;
  ivec2 base   = ivec2(gl_WorkGroupID.xy) * 8;
  ivec2 subset = ivec2(int(gl_LocalInvocationID.x) & 1, int(gl_LocalInvocationID.x) / 2);
  subset += gl_LocalInvocationID.x >= 16 ? ivec2(2, -8) : ivec2(0, 0);
  subset += ivec2(gl_LocalInvocationID.y * 4, 0);
  return base + subset;
}
#endif

//
//--------------------------------------------------------------------------------------------------
//
//
HashAppendData BuildHashAppendData(vec3 pos, vec3 norm, uint linearIdx, GIParameter params, ivec2 imageCoords)
{
  HashAppendData data;

  data.reservoirIdx = linearIdx;
  data.inCellIdx = invalidInCellIndex;
  data.isValid = 0;

  // Check if the normal is valid
  if (any( bvec3( norm != vec3(0.0)) ))
  {
    // Calculate the cell size and find the cell indexI. 
    float cellSize = CalculateCellSize(pos, rtxState.cameraPos, params);
    int cellIdx = FindOrInsertCell(pos, norm, cellSize, params, imageCoords);

    // Check if the cell is valid
    if(cellIdx != -1)
    {
      uint inCellIdx = invalidInCellIndex;
      // Increment the counter and get the inCellIdx
      inCellIdx = atomicAdd(cellCounterBuffer[cellIdx], 1);

      // DebugUintBuffer0 is used to count the number of valid cells
      atomicAdd(debugUintBuffer[0], 1);

      // Set Valid flag
      data.isValid = 1;
      data.cellIdx = cellIdx;
      data.inCellIdx = inCellIdx;
    }
  }

  return data;
}

//
//--------------------------------------------------------------------------------------------------
//
//
vec3 randomColor(vec3 _in) {
    // Generate a pseudo-random color based on the input vector
    float r = fract(sin(dot(_in, vec3(12.9898, 78.233, 45.164))) * 43758.5453);
    float g = fract(sin(dot(_in, vec3(93.989, 67.345, 24.123))) * 43758.5453);
    float b = fract(sin(dot(_in, vec3(29.358, 48.321, 99.123))) * 43758.5453);

    return vec3(r, g, b);
}

//
//--------------------------------------------------------------------------------------------------
//
//
void main()
{
  uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

  // Canvas size
  ivec2 imageRes    = rtxState.size;

  // 2D index of the pixel
  ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);  //SampleSizzled();

  // If the pixel is outside the image, return
  if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
  {
	return;
  }

  // 1D index of the pixel
  uint idx = rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;

  // Set GI parameters
  GIParameter params;
  params.frameDim = rtxState.size;
  params.frameCount = rtxState.frame;
  params.bboxMin = rtxState.sceneBBMin;
  params.minCellSize = rtxState.minCellSize;
  params.fov = rtxState.cameraFov;

  // Set initial reservoir
  Reservoir r = SetGIReservoir(initialSampleBuffer[idx]);

  // Build HashAppendData
  HashAppendData data = BuildHashAppendData(r.vPos, r.vNorm, idx, params, imageCoords);

  // For Debug
  // imageStore(resultImage, imageCoords, vec4(vec3(float(data.cellIdx), float(data.inCellIdx), 0.0f), 1.0f));
  imageStore(debugUintImage, imageCoords, uvec4(data.cellIdx, data.inCellIdx, 0, 1));
  // imageStore(debugImage, imageCoords, vec4(vec3(float(data.cellIdx), float(data.inCellIdx), 0.0f), 1.0f));
  float cellIdxF = float(data.cellIdx % 256);
  imageStore(debugImage, imageCoords, vec4(randomColor(vec3(cellIdxF, cellIdxF, cellIdxF)), 1.0f));

  // Set final sample
  // FinalSample finalSample;
  // finalSample.Li = data.isValid > 0 ? vec3(sin(data.cellIdx), cos(data.cellIdx), cos(data.cellIdx * 2.7445f + 1.4212f)) : vec3(0.f);

  initialReserviors[idx] = r;
  appendBuffer[idx] = data;
}