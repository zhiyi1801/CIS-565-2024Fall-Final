// https://github.com/IwakuraRein/CIS-565-Final-VR-Raytracer
// Shader code for Direct Light using ReSTIR
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "host_device.h"

layout(push_constant) uniform _RtxState {
  RtxState rtxState;
};

#include "globals.glsl"

PtPayload prd;
ShadowHitPayload shadow_payload;
ivec2 imageCoords;

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "traceray_rq.glsl"

#include "pathtrace_initial.glsl"

#define FIREFLIES 1

layout(local_size_x = RayTraceBlockSizeX, local_size_y = RayTraceBlockSizeY) in;

// Find the Temporal reuse sample
bool findTemporalNeighbor(
    DirectReservoir inResv, vec3 norm, float depth, float reprojDepth, uint matId, ivec2 prevCoord, out DirectReservoir outResv)
{
    vec3 pnorm; 
    float pdepth; 
    uint matHash;

    // Check if the previous coordinate is in bound
    if (!inBound(prevCoord, rtxState.size)) {
        return false;
    }

    // Load the previous geometry info
    loadLastGeometryInfo(prevCoord, pnorm, pdepth, matHash);

    if (hash8bit(matId) == matHash)
    {
        DirectReservoir tempResv = prevDirectResv[prevCoord.y * rtxState.size.x + prevCoord.x];
        // Check if the sample has similar geom properties
        if (dot(norm, pnorm) > 0.9 && reprojDepth < pdepth * 1.05 && inResv.DIResvType == tempResv.DIResvType) 
        {
            outResv = tempResv;
            return true;
        }
    }

    return false;
}

void saveNewReservoir(DirectReservoir resv) 
{
    currentDirectResv[imageCoords.y * rtxState.size.x + imageCoords.x] = resv;
}

vec2 createMotionVector(vec3 wpos) 
{
    vec4 proj = sceneCamera.lastProjView * vec4(wpos, 1.0);
    vec3 ndc = proj.xyz / proj.w;
    return ndc.xy * 0.5 + 0.5;
}

ivec2 createMotionIndex(vec3 wpos) 
{
    return ivec2(createMotionVector(wpos) * vec2(rtxState.size));
}

// The target function
vec3 PHatDirect(DirectReservoir resv, State state, vec3 wo) 
{
    return resv.lightSample.Li * Eval(state, wo, state.ffnormal, resv.lightSample.wi, dummyPdf) *
        absDot(state.ffnormal, resv.lightSample.wi);
}

// W = (1/p_hat) * (total_weight / M)
float WDirect(DirectReservoir resv, State state, vec3 wo)
{
    return resv.weight / (Luminance(PHatDirect(resv, state, wo)) *  float(resv.M));
}

// Reset the direct reservoir
void resvReset(inout DirectReservoir resv) {
    resv.M = 0;
    resv.weight = 0;
}

// Update the direct reservoir
void resvUpdate(inout DirectReservoir resv, LightSample newSample, float newWeight, float r) 
{
    resv.weight += newWeight;
    resv.M += 1;
    if (r * resv.weight <= newWeight) 
    {
        resv.lightSample = newSample;
    }
}

bool resvInvalid(DirectReservoir resv) 
{
    return isnan(resv.weight) || resv.weight < 0.0;
}

void resvMerge(inout DirectReservoir resv, DirectReservoir rhs, float r) 
{
    resv.weight += rhs.weight;
    resv.M += rhs.M;
    if (r * resv.weight < rhs.weight) 
    {
        resv.lightSample = rhs.lightSample;
    }
}

void resvCheckValidity(inout DirectReservoir resv) 
{
    if (resvInvalid(resv)) 
    {
        resvReset(resv);
    }
}

void resvClamp(inout DirectReservoir resv, int clamp) 
{
    if (resv.M > clamp) 
    {
        resv.weight *= float(clamp) / float(resv.M);
        resv.M = clamp;
    }
}

vec3 RayTraceRestirDI(Ray r)
{
	// Compute 1D index
    int idx = imageCoords.y * rtxState.size.x + imageCoords.x;

    // Get Intersection
    ClosestHit(r);

    // Hit env
    if(prd.hitT >= INFINITY)
    {
        // Write Gbuffer
        imageStore(thisGbuffer, imageCoords, uvec4(floatBitsToUint(INFINITY), 0, 0, InvalidMatId));

        // Save the motion vector
        imageStore(motionVector, imageCoords, ivec4(0, 0, 0, 0));

        // Return env radiance
        return EnvRadiance(r.direction);
    }

    // Get the shading state
    State state = GetState(prd, r.direction);
    GetMaterialsAndTextures(state, r);

    // Compute motion vector and geometry info
    ivec2 motionIdx = createMotionIndex(state.position);
    uvec4 gInfo = encodeGeometryInfo(state, prd.hitT);
    imageStore(motionVector, imageCoords, ivec4(motionIdx, 0, 0));
    imageStore(thisGbuffer, imageCoords, gInfo);
    barrier();

    if (state.isEmitter) 
    {
        return state.mat.emission;
    }

    vec3 wo = -r.direction;
    vec3 direct = vec3(0.0);
    vec3 albedo = state.mat.albedo;
    // state.mat.albedo = vec3(1.0f);

    // Use reservoir based direct illumination
    DirectReservoir resv;
    resvReset(resv);

    // Check if the surface is rough
    bool IsRough = state.mat.roughness > 0.1 || state.mat.metallic < 0.8f;
    resv.DIResvType = IsRough ? DI_Rough : DI_Smooth;

    // Cache prd & random seed
    PtPayload cachedPrd = prd;
    uint   cachedPrdSeed = prd.seed;
    if(resv.DIResvType == DI_Rough)
    {
        for (int i = 0; i < rtxState.RISSampleNum; ++i)
        {
            // Sample direct light
            LightSample lsample;
            float p = SampleDirectLightNoVisibility(state.position, lsample);

            // Compute target weight
            vec3 pHat = lsample.Li * Eval(state, wo, state.ffnormal, lsample.wi, dummyPdf) * abs(dot(state.ffnormal, lsample.wi));
            float weight = Luminance(pHat / p);

            // Invalid sample
            if (IsPdfInvalid(p) || isnan(weight)) 
            {
                weight = 0.0;
            }

            // Update the reservoir
            resvUpdate(resv, lsample, weight, rand(prd.seed));
        }

        LightSample lsample = resv.lightSample;

        // Generate the shadow ray to do occlusion test
        Ray shadowRay;
        shadowRay.origin = OffsetRay(state.position, state.ffnormal);
        shadowRay.direction = lsample.wi;

        if (Occlusion(shadowRay, state, lsample.dist)) 
        {
            resv.weight = 0.0;
        }

        // Cache prd seed
        cachedPrdSeed = prd.seed;
    }
    else if(resv.DIResvType == DI_Smooth)
    {
        // Sample BSDF
        vec3 sampleWi;
        float samplePdf;
        vec3 sampleBSDF = Sample(state, wo, state.ffnormal, sampleWi, samplePdf, prd.seed);
        // Direct light sampler
        LightSample lsample;
        lsample.dist = prd.hitT;
        lsample.wi = sampleWi;
        lsample.Li = vec3(0.0f);
        float p = samplePdf;

        float weight;
        if(IsPdfInvalid(samplePdf))
        {
            weight = 0.0;
        }
        else if (!IsPdfInvalid(samplePdf)) 
        {
            // Generate next ray
            Ray tempRay;
            tempRay.origin = OffsetRay(state.position, state.ffnormal);
            tempRay.direction = sampleWi;

            // Compute the Intersection
            ClosestHit(tempRay);

            State tempState;
            tempState = GetState(prd, tempRay.direction);
            GetMaterials(tempState, tempRay);
		    tempState.matID = int(hash8bit(tempState.matID));

            // hit ENV
            float dummyPdf;
            if(prd.hitT >= INFINITY * 0.9f)
            {
                lsample.Li = EnvRadiance(sampleWi);
            }
            if(tempState.isEmitter) 
			{
				lsample.Li = LightEval(tempState, prd.hitT, sampleWi, dummyPdf);
			}

            // Compute target weight
            vec3 pHat = lsample.Li * Eval(state, wo, state.ffnormal, lsample.wi, dummyPdf) * abs(dot(state.ffnormal, lsample.wi));
            weight = Luminance(pHat / p);

            // Invalid sample
            if (IsPdfInvalid(p) || isnan(weight)) 
            {
                weight = 0.0;
            }
        }
        // Update the reservoir
        resvUpdate(resv, lsample, weight, rand(prd.seed));

        // Cache prd seed
        cachedPrdSeed = prd.seed;
    }

    // Restore prd
    prd = cachedPrd;
    prd.seed = cachedPrdSeed;

    // Temporal reuse
    float reprojDepth = length(sceneCamera.lastPosition - state.position);
    DirectReservoir temporalSampleResv;

    // Try to find a temporal sample
    if (IsRough && findTemporalNeighbor(resv, state.ffnormal, prd.hitT, reprojDepth, state.matID, motionIdx, temporalSampleResv))
    {
        if (!resvInvalid(temporalSampleResv))
        {
            // Merge temporal sample into resv
            resvMerge(resv, temporalSampleResv, rand(prd.seed));
        }
    }
    
    // Save the new reservoir
    DirectReservoir tempResv = resv;
    resvCheckValidity(tempResv);
    resvClamp(tempResv, rtxState.RISSampleNum * rtxState.reservoirClamp);
    saveNewReservoir(tempResv);

    LightSample lsample = resv.lightSample;
    if (!resvInvalid(resv))
    {
        // p_hat = Luminance(Li * BSDF) * cos, cos is removed as a scalar in both numerator and denominator
        vec3 LiBsdf = lsample.Li * Eval(state, wo, state.ffnormal, lsample.wi, dummyPdf);
        direct = LiBsdf / Luminance(LiBsdf) * resv.weight / float(resv.M);
    }

    if (isnan(direct.x) || isnan(direct.y) || isnan(direct.z)) 
    {
        direct = vec3(0.0);
    }
    vec3 res = clampRadiance(state.mat.emission + direct);
    res = HDRToLDR(res);
    // imageStore(thisDirectResultImage, imageCoords, vec4(direct, 1.f));
    return res;
}

void main()
{
    ivec2 imageRes = rtxState.size;
    imageCoords = ivec2(gl_GlobalInvocationID.xy);
    if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y) 
    {
        return;
    }
    
    prd.seed = tea(rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, rtxState.time);
    Ray ray = raySpawn(imageCoords, ivec2(imageRes));

    vec3 radiance = RayTraceRestirDI(ray);
    vec3 pixelColor = clampRadiance(radiance);
    vec3 norm = decompress_unit_vec(imageLoad(thisGbuffer, imageCoords).y);
    imageStore(thisDirectResultImage, imageCoords, vec4(pixelColor, 1.f));
}