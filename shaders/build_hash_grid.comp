#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "HashBuildStructure.glsl"

#ifndef SWIZZLED
layout(local_size_x = 8, local_size_y = 8) in;
#else
layout(local_size_x = 32, local_size_y = 2) in;
#extension GL_EXT_shader_8bit_storage : enable  // Using uint_8 ...
ivec2 SampleSizzled()
{
  // Sampling Swizzling
  // Convert 32x2 to 8x8, where the sampling will follow how invocation are done in a subgroup.
  // layout(local_size_x = 32, local_size_y = 2) in;
  ivec2 base   = ivec2(gl_WorkGroupID.xy) * 8;
  ivec2 subset = ivec2(int(gl_LocalInvocationID.x) & 1, int(gl_LocalInvocationID.x) / 2);
  subset += gl_LocalInvocationID.x >= 16 ? ivec2(2, -8) : ivec2(0, 0);
  subset += ivec2(gl_LocalInvocationID.y * 4, 0);
  return base + subset;
}
#endif

void main()
{
	uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

	// Canvas size
	ivec2 imageRes    = rtxState.size;

	// 2D index of the pixel
	ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);  //SampleSizzled();

	// If the pixel is outside the image, return
	if (imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
	{
	return;
	}

	// 1D index of the pixel
	uint idx = rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;

	// Get the hash data
	HashAppendData data = appendBuffer[idx];

	// If the data is not valid, return
	if(data.isValid == 0) return;

	float tmp = float(indexBuffer[idx]);
	// imageStore(resultImage, imageCoords, vec4(vec3(tmp), 1.f));
	// uint baseIdx = 
}