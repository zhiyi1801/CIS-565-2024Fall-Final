#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "HashBuildStructure.glsl"

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
layout(local_size_x = 1024) in;

void main()
{
	uint idx = gl_GlobalInvocationID.x;

	// If the index is greater than the number of cells, return
	if (idx >= rtxState.cellCount) 
	{
		return;
	}

	// Change indexBuffer[aa] manually and check if it is updated
	// uint aa = 1;
	// if(idx == aa)
	// {
	// 	indexBuffer[aa] = indexBuffer[aa] + 1327;
	// }

	if(idx == 0)
	{
		// DebugUintBuffer1
		uint val = (indexBuffer[0] == cellCounterBuffer[0]) ? 0 : 1;
		atomicCompSwap(debugUintBuffer[1], 0, val);

		if(val == 1)
		{
			atomicCompSwap(debugUintBuffer[2], 0, idx);
			atomicCompSwap(debugUintBuffer[3], 0, indexBuffer[0] - cellCounterBuffer[0]);
		}
	}

	else
	{
		// DebugUintBuffer1
		uint val = ((indexBuffer[idx] - indexBuffer[idx - 1]) == cellCounterBuffer[idx]) ? 0 : 1;
		atomicCompSwap(debugUintBuffer[1], 0, val);

		if(val == 1)
		{
			atomicCompSwap(debugUintBuffer[2], 0, idx);
			atomicCompSwap(debugUintBuffer[3], 0, indexBuffer[idx] - indexBuffer[idx - 1] - cellCounterBuffer[idx]);
		}
	}
}