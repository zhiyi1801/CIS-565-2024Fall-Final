#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};


#include "globals.glsl"

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "random.glsl"
#include "compress.glsl"
#include "pbr_metallicworkflow.glsl"
#include "HashBuildStructure.glsl"

PtPayload prd;
ShadowHitPayload shadow_payload;
ivec2 imageCoords;
uint idx;

#include "traceray_rq.glsl"
#include "pathtrace_initial.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

//---------------------------------------
// 
ivec2 indSize()
{
	return rtxState.size;
}

//---------------------------------------------
//
// just return the luminance as the weight function(unnormalized target function)
float EvalTargetPdf(vec3 Li, vec3 vPos, vec3 sPos)
{
	return Luminance(Li);
}

//---------------------------------------------
//
// return BSDF * Li
float EvalTargetPdf(vec3 Li, vec3 vPos, vec3 sPos, ReconnectionData rcData)
{
	// Get the hit info
	uvec4 hitInfo = rcData.preRcVertexHitInfo;

	// Unpack the hitInfo
	// Unpack metallic and roughness
    vec2 metallicRoughness = unpackUnorm4x8(hitInfo.z).xy;

	// Unpack Albedo
    vec3 albedo = unpackUnorm4x8(hitInfo.w).rgb;

	// Unpack Normal
	vec3 hitNormal = decompress_unit_vec(hitInfo.y);

	// wi
	vec3 wi = normalize(sPos - vPos) ;

	// wo
	vec3 wo = normalize(rcData.preRcVertexWo);

	// Set shading state
	State state;
	state.mat.albedo = albedo;
	state.mat.metallic = metallicRoughness.x;
	state.mat.roughness = max(metallicRoughness.y, 0.001);

	// Compute BSDF * cos * Li
	vec3 radiance = max(metallicWorkflowBSDF(state, hitNormal, wo, wi) 
					* absDot(hitNormal, wi), 0.1f)
					* Li; 

	return Luminance(radiance);
}

//---------------------------------------------
//
// Merge two reservoirs(merge r2 into r1 r1 <- r2)
bool MergeReservoir(inout uint rseed, inout Reservoir r1, Reservoir r2, float r2TargetPdf, inout float weightS)
{
	// Compute the weight of the second reservoir
	float r2Weight = r2.M * max(0.f, r2.bigW) * r2TargetPdf;

	// Compute the weight sum
	weightS += r2Weight;

	// Update sample count M
	r1.M += r2.M;

	// Get a random number
	float randomNum = rand(rseed);

	// Return this flag to show if use the second reservoir's sample or not
	bool isUpdate = (randomNum * weightS <= r2Weight) || weightS == 0;

	// Update the reservoir r1
	if(isUpdate)
	{
		r1.giSample = r2.giSample;
	}

	return isUpdate;
}

//---------------------------------------------
//
void ComputeFinalWeight(inout Reservoir resv, float targetPdf, float weightSum)
{
	float weight = targetPdf * resv.M;
	resv.bigW = weight > 0 ? weightSum / weight : 0;
}

//--------------------------------------------------------------------------------------------------
//
int FindCell(vec3 pos, vec3 norm, float cellSize, GIParameter params)
{
  // Discretize the position
  uvec3 cellP = uvec3((pos - params.bboxMin) / cellSize);

  // Quantize the normal
  uint normprint = BinaryNorm(norm);

  // Get the cell index
  uint cellIndex = pcg32(normprint + pcg32( uint(cellSize + pcg32(cellP.z + pcg32(cellP.y + pcg32(cellP.x)))) )) % cellSizeNoHash;

  // Second hash index 
  uint checkSum = max(jenkinsHash(normprint + jenkinsHash( uint(cellSize+ jenkinsHash(cellP.z + jenkinsHash(cellP.y + jenkinsHash(cellP.x)))) )), 1);

  for(uint i = 0; i < 32; ++i)
  {
    // Linear probing stride 32
    uint idx = cellIndex * 32 + i;

    // Previous checksum 
    uint checkSumPre;

    // Check if the checksum is the same
    // if the same, return the idx
    if(checkSum == checkSumBuffer[idx])
    {
      return int(idx);
    }
  }

  return -1;
}

//------------------------------------------------
//
void StResample(ivec2 imageCoords)
{
	uint idx = rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;

	// Create a random seed
	uint rSeed = tea(idx, rtxState.frame * rtxState.maxSamples);

	// Get reconnection data of this pixel
	ReconnectionData rcData = reconnectionDataBuffer[idx];

	// If the pixel has no reconnection data, return
	if(rcData.preRcVertexHitInfo == vec4(0))
	{
		return;
	}
	
	// Get the initial sample of the pixel
	Reservoir initialResv = initialReservoirs[idx];

	ivec2 motionIdx = imageLoad(motionVector, imageCoords).xy;

	// Get the previous linear index
	uint preIdx = rtxState.size.x * motionIdx.y + motionIdx.x;

	// Temporal Check
	// Check if the prev sample is valid
	bool isPreValid = inBound(motionIdx, rtxState.size);

	// Get the previous sample
	Reservoir temporalPrevReservoir = prevReservoirs[preIdx];

	// If the temporal sample is valid, check the geometry
	if(isPreValid)
	{
		// TODO: 0.1, 0.8 are the threshold values
		isPreValid = (dot(initialResv.giSample.nv, temporalPrevReservoir.giSample.nv) > 0.5f) && (temporalPrevReservoir.giSample.vMatId == initialResv.giSample.vMatId) && length(temporalPrevReservoir.giSample.xv - initialResv.giSample.xv) < 0.5f;

		// Get the prev Camera Pos
		vec3 prevCamPos = vec3(inverse(sceneCamera.lastView) * vec4(0,0,0,1));

		// Check the depth
		float viewDepth = length(rtxState.cameraPos - initialResv.giSample.xv);
		float prevViewDepth = length(prevCamPos - initialResv.giSample.xv);

		// a random number to discard temporal sample
		float randNum = rand(rSeed);
	}

	//--------------------------------------------------------------------------------------------------------------------
	//********************************************************************************************************************
	//--------------------------------------------------------------------------------------------------------------------
	// Temporal Reuse
	temporalPrevReservoir.M = clamp(temporalPrevReservoir.M, 0, rtxState.reservoirClamp * 2);
	if(!isPreValid)
	{
		// If the temporal sample is not valid or is too old, reset M
		temporalPrevReservoir.M = 0;
	}

	// To use 1 sample
	// temporalPrevReservoir.M = 0;

	// If the pixel has no reconnection data, return
	// Get the target pdf of the prev reservoir
	float tpPrev = EvalTargetPdf(temporalPrevReservoir.giSample.L, initialResv.giSample.xv, temporalPrevReservoir.giSample.xs, rcData);

	// Compute the weight sum(W = Weight_s / (M * targetpdf))
	float wSum = temporalPrevReservoir.M * tpPrev * max(0.f, temporalPrevReservoir.bigW);

	// Get the target pdf of the current reservoir
	float tpCurrent = EvalTargetPdf(initialResv.giSample.L, initialResv.giSample.xv, initialResv.giSample.xs, rcData);

	// merge initialResv and temporalPrevReservoir
	bool isUpdate = MergeReservoir(rSeed, temporalPrevReservoir, initialResv, tpCurrent, wSum);

	// Compute new target pdf
	float tpNew = EvalTargetPdf(temporalPrevReservoir.giSample.L, initialResv.giSample.xv, temporalPrevReservoir.giSample.xs, rcData);

	// Compute final weight
	ComputeFinalWeight(temporalPrevReservoir, tpNew, wSum);
	temporalPrevReservoir.M = clamp(temporalPrevReservoir.M, 0, rtxState.reservoirClamp * 2);
	temporalPrevReservoir.age++;

	// Set current vPos and vNormal
	temporalPrevReservoir.giSample.xv = initialResv.giSample.xv;
    temporalPrevReservoir.giSample.nv = initialResv.giSample.nv;

	// Write the temporal reservoir to the current buffer
	currentReservoirs[idx] = temporalPrevReservoir;
	barrier();
}

//
//--------------------------------------------------------------------------------------------------
//
//
void main()
{
	uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

	ivec2 imageRes    = rtxState.size;
	imageCoords = ivec2(gl_GlobalInvocationID.xy);  //SampleSizzled();

	// Check if the pixel is outside the image
	if(imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
	{
		return;
	}
	prd.seed = tea(indSize().x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x, rtxState.time);

	StResample(imageCoords);
	return;
}