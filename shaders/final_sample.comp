#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};

#include "globals.glsl"

#include "layouts.glsl"
#include "random.glsl"
#include "common.glsl"
#include "random.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

//
//--------------------------------------------------------------------------------------------------
//
//
void main()
{
	uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

	ivec2 imageRes    = rtxState.size;
	ivec2 imageCoords = ivec2(gl_GlobalInvocationID.xy);  //SampleSizzled();

	// Check if the pixel is outside the image
	if(imageCoords.x >= imageRes.x || imageCoords.y >= imageRes.y)
	{
		return;
	}

	// Compute 1D index
	uint idx = rtxState.size.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;

	// Get the current sample reservoir
	Reservoir r = currentReserviors[idx];

	// Write the final sample
	FinalSample s;

	s.dir = ((r.rcEnv == 1) ? vec3(unpackSnorm4x8(r.rcEnvDirPacked)) : normalize(r.sPos - r.vPos));
    s.Li = r.radiance * max(0.f, r.weightF);

	finalSamples[idx] = s;
}