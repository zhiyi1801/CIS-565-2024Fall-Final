/*
 * Copyright (c) 2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

//-------------------------------------------------------------------------------------------------
// Implementation of the RTX Ray-Generation shader.
// The implortant code for shading is in pathtrace.glsl

#version 460
#extension GL_GOOGLE_include_directive : enable         // To be able to use #include
#extension GL_EXT_ray_tracing : require                 // This is about ray tracing
#extension GL_KHR_shader_subgroup_basic : require       // Special extensions to debug groups, warps, SM, ...
#extension GL_EXT_scalar_block_layout : enable          // Align structure layout to scalar
#extension GL_EXT_nonuniform_qualifier : enable         // To access unsized descriptor arrays
#extension GL_ARB_shader_clock : enable                 // Using clockARB
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters
#extension GL_EXT_scalar_block_layout : enable          // Usage of 'scalar' block layout

#extension GL_NV_shader_sm_builtins : require     // Debug - gl_WarpIDNV, gl_SMIDNV
#extension GL_ARB_gpu_shader_int64 : enable       // Debug - heatmap value
#extension GL_EXT_shader_realtime_clock : enable  // Debug - heatmap timing

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_debug_printf : enable

#include "host_device.h"

#include "globals.glsl"
#include "layouts.glsl"

layout(location = 0) rayPayloadEXT PtPayload prd;
layout(location = 1) rayPayloadEXT ShadowHitPayload shadow_payload;


layout(push_constant) uniform _RtxState
{
  RtxState rtxState;
};


#include "traceray_rtx.glsl"

#include "pathtrace.glsl"
#include "random.glsl"
#include "common.glsl"


void main()
{
  uint64_t start = clockRealtimeEXT();  // Debug - Heatmap

  ivec2 imageRes    = rtxState.size;
  ivec2 imageCoords = ivec2(gl_LaunchIDEXT.xy);

  // Initialize the seed for the random number
  prd.seed = initRandom(gl_LaunchSizeEXT.xy, gl_LaunchIDEXT.xy, rtxState.frame);

  vec3 pixelColor = vec3(0);
  for(int smpl = 0; smpl < rtxState.maxSamples; ++smpl)
  {
    pixelColor += samplePixel(imageCoords, imageRes);  // See pathtrace.glsl
  }

  pixelColor /= rtxState.maxSamples;

  // Debug - Heatmap
  if(rtxState.debugging_mode == eHeatmap)
  {
    uint64_t end  = clockRealtimeEXT();
    float    low  = rtxState.minHeatmap;
    float    high = rtxState.maxHeatmap;
    float    val  = clamp((float(end - start) - low) / (high - low), 0.0, 1.0);
    pixelColor    = temperature(val);

    // Wrap & SM visualization
    // pixelColor = temperature(float(gl_SMIDNV) / float(gl_SMCountNV - 1)) * float(gl_WarpIDNV) / float(gl_WarpsPerSMNV - 1);
  }

  // Do accumulation over time
  if(rtxState.frame > 0)
  {
    vec3 old_color  = imageLoad(resultImage, imageCoords).xyz;
    vec3 new_result = mix(old_color, pixelColor, 1.0f / float(rtxState.frame + 1));

    imageStore(resultImage, imageCoords, vec4(new_result, 1.f));
  }
  else
  {
    // First frame, replace the value in the buffer
    imageStore(resultImage, imageCoords, vec4(pixelColor, 1.f));
  }
}
